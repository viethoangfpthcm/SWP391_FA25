import React, { useState, useEffect } from "react";
import { FaCheck, FaTimes, FaEye, FaFilter, FaSpinner, FaExclamationTriangle, FaCalendarAlt } from "react-icons/fa";
import "./StaffDashboard.css";
import Sidebar from "../../page/sidebar/sidebar.jsx";
import { useNavigate } from "react-router-dom";

if (import.meta.env.MODE !== "development") {
  console.log = () => { };
}

export default function StaffDashboard({ user, userRole }) {
  const [appointments, setAppointments] = useState([]);
  const [technicians, setTechnicians] = useState([]);
  const [selectedTechnicians, setSelectedTechnicians] = useState({});
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [actionLoading, setActionLoading] = useState(null);
  const [statusFilter, setStatusFilter] = useState("all");
  const navigate = useNavigate();
  const [userInfo, setUserInfo] = useState(null);

  const API_BASE = import.meta.env.VITE_API_URL || "https://103.90.226.216:8443";
  const token = localStorage.getItem("token");

  const fetchUserInfo = async () => {
    const token = localStorage.getItem("token");
    // Ki·ªÉm tra token v√† tr√°nh l·ªói
    if (!token) {
      setLoading(false);
      navigate("/");
      return;
    }

    try {
      const response = await fetch(`${API_BASE}/api/users/account/current`, {
        headers: {
          Authorization: `Bearer ${token}`,
          Accept: "application/json",
        },
      });

      if (!response.ok) {
        console.error("Failed to fetch user info:", response.status);
        if (response.status === 401) {
          // X·ª≠ l√Ω l·ªói 401: ƒêƒÉng xu·∫•t
          localStorage.removeItem("token");
          localStorage.removeItem("fullName");
          localStorage.removeItem("role");
          navigate("/");
        }
        throw new Error("Kh√¥ng th·ªÉ t·∫£i th√¥ng tin ng∆∞·ªùi d√πng.");
      }

      const data = await response.json();
      const fetchedFullName = data.fullName || data.name || "N/A";
      const fetchedRole = data.role || "N/A";

      // L∆ØU V√ÄO LOCAL STORAGE
      localStorage.setItem('fullName', fetchedFullName);
      localStorage.setItem('role', fetchedRole);

      // C·∫¨P NH·∫¨T STATE
      setUserInfo({
        fullName: fetchedFullName,
        role: fetchedRole
      });
      setError(null);

    } catch (err) {
      console.error("Error fetching user info:", err);
      setError(`L·ªói t·∫£i th√¥ng tin ng∆∞·ªùi d√πng: ${err.message}`);
    }
  };

  // H√†m fetch danh s√°ch l·ªãch h·∫πn
  const fetchAppointments = async () => {
    try {
      console.log("üìÖ Fetching all appointments...");
      setError(null);
      // API n√†y tr·∫£ v·ªÅ StaffBookingDTO (ƒë√£ bao g·ªìm checklistStatus)
      const response = await fetch(`${API_BASE}/api/staff/bookings`, {
        headers: {
          Authorization: `Bearer ${token}`,
          Accept: "application/json",
        },
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error("Appointments API failed:", response.status, errorText);
        if (response.status === 401) {
          setError("Phi√™n ƒëƒÉng nh·∫≠p h·∫øt h·∫°n. ƒêang chuy·ªÉn h∆∞·ªõng...");
          setTimeout(() => {
            localStorage.removeItem("token");
            localStorage.removeItem("userId");
            localStorage.removeItem("role");
            navigate("/");
          }, 2000);
        } else {
          setError(`Kh√¥ng th·ªÉ t·∫£i l·ªãch h·∫πn (${response.status}): ${errorText}`);
        }
        setAppointments([]);
        return false;
      }

      const data = await response.json();
      console.log("‚úÖ Appointments data fetched:", data);
      // S·∫Øp x·∫øp cho booking m·ªõi nh·∫•t l√™n ƒë·∫ßu
      const sortedData = (Array.isArray(data) ? data : []).sort((a, b) =>
        new Date(b.bookingDate) - new Date(a.bookingDate)
      );
      setAppointments(sortedData);
      return true;

    } catch (error) {
      console.error("‚ùå Error fetching appointments:", error);
      setError("L·ªói k·∫øt n·ªëi ho·∫∑c x·ª≠ l√Ω d·ªØ li·ªáu l·ªãch h·∫πn.");
      setAppointments([]);
      return false;
    }
  };

  // H√†m fetch danh s√°ch k·ªπ thu·∫≠t vi√™n
  const fetchTechnicians = async () => {
    try {
      console.log("üë®‚Äçüîß Fetching technicians...");
      setError(null);
      const res = await fetch(`${API_BASE}/api/staff/technicians`, {
        headers: {
          Authorization: `Bearer ${token}`,
          Accept: "application/json",
        },
      });

      if (!res.ok) {
        const errorText = await res.text();
        console.error("Technicians API failed:", res.status, errorText);
        if (res.status === 401) {
          setError("Phi√™n ƒëƒÉng nh·∫≠p h·∫øt h·∫°n khi t·∫£i KTV.");
        } else {
          setError(`Kh√¥ng th·ªÉ t·∫£i danh s√°ch KTV (${res.status}): ${errorText}`)
        }
        setTechnicians([]);
        return false;
      }

      const data = await res.json();
      console.log("‚úÖ Technicians data fetched:", data);

      if (!Array.isArray(data)) {
        console.warn("API returned non-array for technicians, setting to empty array.");
        setTechnicians([]);
        return true;
      }

      const mapped = data.map((t) => ({
        userId: String(t.userId || t.id || ""),
        fullName: t.fullName || t.name || "N/A",
        activeBookings: parseInt(t.activeBookings) || 0,
      }));
      console.log("Mapped technicians:", mapped);
      setTechnicians(mapped);
      return true;

    } catch (err) {
      console.error("‚ùå Error fetching technicians:", err);
      setError("L·ªói k·∫øt n·ªëi ho·∫∑c x·ª≠ l√Ω d·ªØ li·ªáu k·ªπ thu·∫≠t vi√™n.");
      setTechnicians([]);
      return false;
    }
  };

  // Load data khi component ƒë∆∞·ª£c mount
  useEffect(() => {
    const loadData = async () => {
      setLoading(true);
      setError(null);
      await fetchUserInfo();
      // Ch·∫°y song song
      await Promise.allSettled([fetchAppointments(), fetchTechnicians()]);
      setLoading(false);
    };

    if (!token) {
      setError("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ truy c·∫≠p trang n√†y.");
      setLoading(false);
      navigate("/");
      return;
    }
    loadData();
  }, [token, navigate]);

  // X·ª≠ l√Ω khi ch·ªçn k·ªπ thu·∫≠t vi√™n
  const handleTechnicianChange = (bookingId, technicianId) => {
    console.log(`üë§ Technician selected for booking ${bookingId}: ${technicianId}`);
    setSelectedTechnicians((prev) => ({
      ...prev,
      [bookingId]: technicianId,
    }));
  };

  // H√†m l·∫•y t√™n technician t·ª´ danh s√°ch b·∫±ng userId
  const getTechnicianName = (technicianId) => {
    if (!technicianId) return '‚Äî';
    const tech = technicians.find(t => String(t.userId) === String(technicianId));
    return tech ? tech.fullName : `KTV #${technicianId}`;
  };

  // H√†m x·ª≠ l√Ω ph√™ duy·ªát v√† ph√¢n c√¥ng
  const handleAssign = async (bookingId) => {
    const technicianId = selectedTechnicians[bookingId];
    if (!technicianId) {
      setError("Vui l√≤ng ch·ªçn m·ªôt k·ªπ thu·∫≠t vi√™n ƒë·ªÉ ph√¢n c√¥ng.");
      return;
    }

    setActionLoading(bookingId);
    setError(null);

    try {
      console.log(`‚úçÔ∏è Assigning technician ${technicianId} to booking ${bookingId}...`);
      const res = await fetch(
        `${API_BASE}/api/staff/bookings/assign-technician`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${token}`,
          },
          body: JSON.stringify({ bookingId: parseInt(bookingId), technicianId: parseInt(technicianId) }),
        }
      );

      if (!res.ok) {
        const errorText = await res.text();
        console.error("Assignment API failed:", res.status, errorText);
        throw new Error(errorText || "Ph√¢n c√¥ng th·∫•t b·∫°i.");
      }

      console.log(`‚úÖ Assignment successful for booking ${bookingId}`);

      setSelectedTechnicians((prev) => {
        const next = { ...prev };
        delete next[bookingId];
        return next;
      });

      await fetchAppointments();
      await fetchTechnicians(); // T·∫£i l·∫°i KTV ƒë·ªÉ c·∫≠p nh·∫≠t s·ªë vi·ªác

    } catch (err) {
      console.error("‚ùå Error assigning technician:", err);
      setError(`L·ªói khi ph√¢n c√¥ng: ${err.message}`);
    } finally {
      setActionLoading(null);
    }
  };
  const handleApprove = async (bookingId) => {
    setActionLoading(bookingId);
    setError(null);

    try {
      console.log(`üëç Approving booking ${bookingId}...`);

      const res = await fetch(
        `${API_BASE}/api/staff/bookings/${bookingId}/approve`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${token}`,
          },
        }
      );

      if (!res.ok) {
        const errorText = await res.text();
        console.error("Approve API failed:", res.status, errorText);

        if (res.status === 401) {
          setError("Phi√™n ƒëƒÉng nh·∫≠p h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
          setTimeout(() => navigate("/"), 1500);
        } else {
          throw new Error(errorText || `Duy·ªát th·∫•t b·∫°i (${res.status})`);
        }
        return; // D·ª´ng l·∫°i n·∫øu l·ªói
      }

      console.log(`Approve successful for booking ${bookingId}`);
      await fetchAppointments(); // T·∫£i l·∫°i danh s√°ch ƒë·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i

    } catch (err) {
      console.error(" Error approving booking:", err);
      setError(`L·ªói khi duy·ªát: ${err.message}`);
    } finally {
      setActionLoading(null);
    }
  };

  // H√†m x·ª≠ l√Ω t·ª´ ch·ªëi
  const handleDecline = async (bookingId) => {
    const reason = prompt("Nh·∫≠p l√Ω do t·ª´ ch·ªëi (b·∫Øt bu·ªôc):");
    if (!reason) {
      return;
    }

    setActionLoading(bookingId);
    setError(null);

    try {
      console.log(`‚ùå Declining booking ${bookingId} with reason: ${reason}...`);
      const url = `${API_BASE}/api/staff/bookings/${bookingId}/decline?reason=${encodeURIComponent(reason)}`;

      const res = await fetch(url, {
        method: "POST",
        headers: {
          Authorization: `Bearer ${token}`,
          Accept: "application/json",
        },
      });

      if (!res.ok) {
        const errorText = await res.text();
        console.error("Decline API failed:", res.status, errorText);
        throw new Error(errorText || "T·ª´ ch·ªëi th·∫•t b·∫°i.");
      }

      console.log(`‚úÖ Decline successful for booking ${bookingId}`);
      await fetchAppointments();

    } catch (err) {
      console.error("‚ùå Error declining appointment:", err);
      setError(`L·ªói khi t·ª´ ch·ªëi: ${err.message}`);
    } finally {
      setActionLoading(null);
    }
  };

  // *** TH√äM M·ªöI: H√ÄM B√ÄN GIAO XE ***
  const handleHandover = async (bookingId) => {
    if (!window.confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën B√ÄN GIAO XE v√† ho√†n t·∫•t booking n√†y?")) {
      return;
    }

    setActionLoading(bookingId);
    setError(null);

    try {
      console.log(`üöÄ Handing over vehicle for booking ${bookingId}...`);
      const url = `${API_BASE}/api/staff/bookings/${bookingId}/handover`;

      const res = await fetch(url, {
        method: "POST",
        headers: {
          Authorization: `Bearer ${token}`,
          Accept: "application/json",
        },
      });

      if (!res.ok) {
        const errorText = await res.text();
        console.error("Handover API failed:", res.status, errorText);
        // Hi·ªÉn th·ªã l·ªói nghi·ªáp v·ª• t·ª´ backend
        throw new Error(errorText || "B√†n giao th·∫•t b·∫°i.");
      }

      console.log(`‚úÖ Handover successful for booking ${bookingId}`);
      await fetchAppointments(); // T·∫£i l·∫°i danh s√°ch ƒë·ªÉ th·∫•y status 'Completed'

    } catch (err) {
      console.error("‚ùå Error handing over vehicle:", err);
      setError(`L·ªói khi b√†n giao: ${err.message}`);
    } finally {
      setActionLoading(null);
    }
  };
  // *** K·∫æT TH√öC H√ÄM M·ªöI ***

  // H√†m t·∫°o badge tr·∫°ng th√°i
  const getStatusBadge = (status) => {
    const statusText = status ? status.toLowerCase() : 'unknown';
    let label = status || 'Kh√¥ng x√°c ƒë·ªãnh';
    let className = 'status-default';

    switch (statusText) {
      case 'pending': label = 'Ch·ªù x·ª≠ l√Ω'; className = 'status-pending'; break;
      case 'approved': label = 'ƒê√£ duy·ªát'; className = 'status-approved'; break;
      case 'assigned': label = 'ƒê√£ ph√¢n c√¥ng'; className = 'status-assigned'; break;
      case 'in progress': label = 'ƒêang th·ª±c hi·ªán'; className = 'status-inprogress'; break;
      // 'Completed' b√¢y gi·ªù l√† tr·∫°ng th√°i cu·ªëi c√πng (sau khi b√†n giao)
      case 'completed': label = 'ƒê√£ ho√†n t·∫•t'; className = 'status-completed'; break;
      case 'declined': label = 'ƒê√£ t·ª´ ch·ªëi'; className = 'status-declined'; break;
      case 'paid': label = 'ƒê√£ thanh to√°n'; className = 'status-paid'; break; // (Ch·ªù b√†n giao)
      case 'cancelled': label = 'ƒê√£ h·ªßy'; className = 'status-declined'; break;
    }

    return <span className={`status-badge ${className}`}>{label}</span>;
  };

  // *** S·ª¨A L·∫†I H√ÄM N√ÄY: Staff c√≥ th·ªÉ xem checklist s·ªõm h∆°n ***
  const hasChecklist = (status) => {
    const statusText = status ? status.toLowerCase() : '';
    // Staff c√≥ th·ªÉ xem checklist ngay khi ƒë√£ ph√¢n c√¥ng
    return ['assigned', 'in progress', 'completed', 'paid'].includes(statusText);
  };

  // H√†m ƒëi·ªÅu h∆∞·ªõng ƒë·∫øn trang xem Checklist
  const handleViewChecklist = (bookingId) => {
    // S·ª≠ d·ª•ng Booking ID ƒë·ªÉ g·ªçi API Checklist c·ªßa Staff
    navigate(`/staff/checklist/${bookingId}`);
  };

  // --- Render ---

  if (loading) {
    return (
      <div className="dashboard-container">
        <Sidebar
          sidebarOpen={true}
          userName={userInfo?.fullName}
          userRole={userInfo?.role}
        />
        <main className="main-content loading-state">
          <FaSpinner className="spinner" />
          <p>ƒêang t·∫£i d·ªØ li·ªáu...</p>
        </main>
      </div>
    );
  }

  const filteredAppointments = appointments.filter(appt =>
    statusFilter === 'all' || (appt.status && appt.status.toLowerCase() === statusFilter)
  );

  return (
    <div className="dashboard-container">
      <Sidebar
        sidebarOpen={true}
        userName={userInfo?.fullName}
        userRole={userInfo?.role}
      />
      <main className="main-content">
        <header className="page-header">
          <h1><FaCalendarAlt /> Qu·∫£n l√Ω l·ªãch h·∫πn</h1>
          <p>Xem x√©t, ph√¢n c√¥ng v√† theo d√µi c√°c l·ªãch h·∫πn c·ªßa kh√°ch h√†ng.</p>
        </header>

        {error && (
          <div className="error-message general-error">
            <FaExclamationTriangle /> {error}
            {/* N√∫t clear l·ªói */}
            <button onClick={() => setError(null)} className="clear-error-btn">&times;</button>
          </div>
        )}

        <div className="actions-bar">
          <div className="filter-group">
            <label htmlFor="statusFilter"><FaFilter /> L·ªçc:</label>
            <select
              id="statusFilter"
              value={statusFilter}
              onChange={(e) => setStatusFilter(e.target.value)}
              className="status-filter-select"
            >
              <option value="all">T·∫•t c·∫£</option>
              <option value="pending">Ch·ªù x·ª≠ l√Ω</option>
              <option value="approved">ƒê√£ duy·ªát</option>
              <option value="assigned">ƒê√£ ph√¢n c√¥ng</option>
              <option value="in progress">ƒêang th·ª±c hi·ªán</option>                         
              <option value="paid">ƒê√£ thanh to√°n (Ch·ªù b√†n giao)</option>
              <option value="declined">ƒê√£ t·ª´ ch·ªëi</option>
              <option value="cancelled">ƒê√£ h·ªßy</option>             
              <option value="completed">ƒê√£ ho√†n t·∫•t </option>
            </select>
          </div>
        </div>

        <div className="table-card">
          <div className="table-wrapper">
            <table className="data-table">
              <thead>
                <tr>
                  <th>ID</th>
                  <th>Ng√†y h·∫πn</th>
                  <th>Kh√°ch h√†ng</th>
                  <th>ƒêi·ªán tho·∫°i</th>
                  <th>Bi·ªÉn s·ªë</th>
                  <th>D√≤ng xe</th>
                  <th>S·ªë KM</th>
                  <th>K·ªπ thu·∫≠t vi√™n</th>
                  <th>Tr·∫°ng th√°i </th>
                  <th>Thao t√°c</th>
                </tr>
              </thead>
              <tbody>
                {!error && filteredAppointments.length > 0 ? (
                  filteredAppointments.map((appt) => {
                    const statusText = appt.status?.toLowerCase();
                    const checklistStatusText = appt.checklistStatus?.toLowerCase();

                    const isPending = statusText === 'pending';
                    const isApproved = statusText === 'approved';
                    const isPaid = statusText === 'paid';
                    const isChecklistCompleted = checklistStatusText === 'completed';
                    const hasAssignedTech = appt.technicianId || appt.technicianName;

                    return (
                      <tr key={appt.bookingId}>
                        <td><span className="cell-main">#{appt.bookingId}</span></td>
                        <td>
                          <span className="cell-main">{new Date(appt.bookingDate).toLocaleDateString("vi-VN")}</span>
                          <span className="cell-sub">{new Date(appt.bookingDate).toLocaleTimeString("vi-VN", { hour: '2-digit', minute: '2-digit' })}</span>
                        </td>
                        <td><span className="cell-main">{appt.customerName}</span></td>
                        <td><span className="cell-sub">{appt.customerPhone || 'N/A'}</span></td>
                        <td><span className="cell-main">{appt.vehiclePlate}</span></td>
                        <td><span className="cell-sub">{appt.vehicleModel}</span></td>
                        <td><span className="cell-sub">{appt.currentKm ? appt.currentKm.toLocaleString() + ' km' : 'N/A'}</span></td>


                        <td>
                          {isApproved && !hasAssignedTech ? (
                            // CH·ªà HI·ªÇN TH·ªä DROPDOWN KHI ƒê√É DUY·ªÜT V√Ä CH∆ØA PH√ÇN C√îNG
                            <div className="technician-select-wrapper">
                              <select
                                className="technician-select"
                                value={selectedTechnicians[appt.bookingId] || ""}
                                onChange={(e) => handleTechnicianChange(appt.bookingId, e.target.value)}
                                disabled={actionLoading === appt.bookingId}
                              >
                                <option value="">-- Ch·ªçn KTV --</option>
                                {technicians.length > 0 ? (
                                  technicians.map((tech) => (
                                    <option key={tech.userId} value={tech.userId}>
                                      {tech.fullName} ({tech.activeBookings} vi·ªác)
                                    </option>
                                  ))
                                ) : (
                                  <option value="" disabled>Kh√¥ng c√≥ KTV</option>
                                )}
                              </select>
                              {/* HI·ªÇN TH·ªä C·∫¢NH B√ÅO B·∫¨N */}
                              {selectedTechnicians[appt.bookingId] && technicians.find(t => t.userId === selectedTechnicians[appt.bookingId])?.activeBookings > 0 && (
                                <span className="tech-note">ƒêang b·∫≠n {technicians.find(t => t.userId === selectedTechnicians[appt.bookingId])?.activeBookings} vi·ªác</span>
                              )}
                            </div>
                          ) : isPending ? (
                            // N·∫æU L√Ä PENDING, HI·ªÇN TH·ªä CH·ªú DUY·ªÜT
                            <span className="cell-sub">Ch·ªù duy·ªát</span>
                          ) : (
                            // C√ÅC TR∆Ø·ªúNG H·ª¢P KH√ÅC HI·ªÇN TH·ªä T√äN KTV (ƒê√É PH√ÇN C√îNG, ƒêANG L√ÄM, HO√ÄN TH√ÄNH)
                            <span className="cell-sub">{appt.technicianName || getTechnicianName(appt.technicianId) || '‚Äî'}</span>
                          )}
                        </td>

                        <td>
                          {/* Hi·ªÉn th·ªã c·∫£ 2 tr·∫°ng th√°i n·∫øu c·∫ßn */}
                          {getStatusBadge(appt.status)}
                          
                        </td>

                        <td>
                          {/* *** C·∫¨P NH·∫¨T LOGIC N√öT B·∫§M *** */}
                          {isPending ? (
                            // 1. TR·∫†NG TH√ÅI CH·ªú X·ª¨ L√ù: DUY·ªÜT / T·ª™ CH·ªêI
                            <div className="action-buttons-cell">
                              <button
                                className="btn-action btn-approve"
                                onClick={() => handleApprove(appt.bookingId)}
                                disabled={actionLoading === appt.bookingId}
                              >
                                {actionLoading === appt.bookingId ? <FaSpinner className="spinner-icon" /> : <FaCheck />} Duy·ªát
                              </button>
                              <button
                                className="btn-action btn-decline"
                                onClick={() => handleDecline(appt.bookingId)}
                                disabled={actionLoading === appt.bookingId}
                              >
                                {actionLoading === appt.bookingId ? <FaSpinner className="spinner-icon" /> : <FaTimes />} T·ª´ ch·ªëi
                              </button>
                            </div>
                          ) : isApproved && !hasAssignedTech ? (
                            // 2. TR·∫†NG TH√ÅI ƒê√É DUY·ªÜT & CH∆ØA PH√ÇN C√îNG: PH√ÇN C√îNG
                            <div className="action-buttons-cell">
                              <button
                                className="btn-action btn-assign"
                                onClick={() => handleAssign(appt.bookingId)}
                                disabled={!selectedTechnicians[appt.bookingId] || actionLoading === appt.bookingId}
                              >
                                {actionLoading === appt.bookingId ? <FaSpinner className="spinner-icon" /> : <FaCheck />} Ph√¢n c√¥ng
                              </button>
                            </div>
                            // 3.  ƒê√É THANH TO√ÅN & CHECKLIST HO√ÄN TH√ÄNH: B√ÄN GIAO XE ***
                          ) : (isPaid && isChecklistCompleted) ? (
                            <button
                              className="btn-action btn-handover" 
                              onClick={() => handleHandover(appt.bookingId)}
                              disabled={actionLoading === appt.bookingId}
                            >
                              {actionLoading === appt.bookingId ? <FaSpinner className="spinner-icon" /> : <FaCheck />} B√†n giao
                            </button>
                            // 4. TR·∫†NG TH√ÅI ƒê√É C√ì CHECKLIST (assigned, in progress, v.v.): XEM
                          ) : hasChecklist(statusText) ? (
                            <button
                              className="btn-action btn-view"
                              onClick={() => handleViewChecklist(appt.bookingId)}
                              disabled={actionLoading === appt.bookingId}
                            >
                              <FaEye /> Xem
                            </button>
                          ) : (
                            // 5. TR·∫†NG TH√ÅI C√íN L·∫†I (Declined, Cancelled, Completed...)
                            <span className="cell-sub">‚Äî</span>
                          )}
                        </td>

                      </tr>
                    );
                  })
                ) : (
                  !error && (
                    <tr>
                      <td colSpan="10" className="empty-state">
                        <p>
                          s ¬† {statusFilter === 'all'
                            ? 'Hi·ªán kh√¥ng c√≥ l·ªãch h·∫πn n√†o.'
                            : `Kh√¥ng c√≥ l·ªãch h·∫πn n√†o ·ªü tr·∫°ng th√°i "${statusFilter}".`}
                        </p>
                      </td>
                    </tr>
                  )
                )}
                {error && filteredAppointments.length === 0 && (
                  <tr>
                    <td colSpan="10" className="empty-state error-in-table">
                      <FaExclamationTriangle />
                      a ¬† ¬† <p>ƒê√£ x·∫£y ra l·ªói khi t·∫£i d·ªØ li·ªáu.</p>
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>
        </div>
      </main>
    </div>
  );
}