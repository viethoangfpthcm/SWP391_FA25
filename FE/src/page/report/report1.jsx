import React, { useEffect, useState } from "react";
import Navbar from "../../components/Navbar.jsx";
import Footer from "../../components/Footer.jsx";
import "./report1.css";

const Report1 = () => {
  const [reports, setReports] = useState([]);
  const [loading, setLoading] = useState(true);

  // üîπ T·∫£i danh s√°ch checklist b·∫£o d∆∞·ª°ng c·ªßa kh√°ch h√†ng
  useEffect(() => {
    const fetchReports = async () => {
      try {
        const token = localStorage.getItem("token");
        const customerId = localStorage.getItem("userId");

        if (!token || !customerId) {
          throw new Error("Thi·∫øu token ho·∫∑c customerId trong localStorage!");
        }

        const url = `http://localhost:8080/api/customer/maintenance/checklists?customerId=${encodeURIComponent(
          customerId
        )}`;
        console.log("[Report1] GET:", url);

        const response = await fetch(url, {
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
          },
        });

        if (!response.ok) {
          const text = await response.text();
          console.error("[Report1] ‚ùå Response error:", response.status, text);
          if (response.status === 401) {
            alert("Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i!");
            localStorage.removeItem("token");
            window.location.href = "/login";
          }
          return;
        }

        const data = await response.json();
        const normalized = Array.isArray(data)
          ? data
          : Array.isArray(data.data)
          ? data.data
          : data
          ? [data]
          : [];

        setReports(normalized);
      } catch (error) {
        console.error("[Report1] L·ªói khi t·∫£i d·ªØ li·ªáu:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchReports();
  }, []);

  // üîπ H√†m x·ª≠ l√Ω ph√™ duy·ªát / t·ª´ ch·ªëi
  // üîπ H√†m x·ª≠ l√Ω ph√™ duy·ªát / t·ª´ ch·ªëi (ƒê√É FIX)
const handleApproval = async (detailId, status) => {
  try {
    const token = localStorage.getItem("token");
    const customerId = localStorage.getItem("userId");
    if (!token || !customerId) throw new Error("Thi·∫øu token ho·∫∑c customerId!");

    // Chuy·ªÉn status sang d·∫°ng BE ch·∫•p nh·∫≠n
    const approvalStatus = status === "approved" ? "APPROVED" : "DECLINED";

    const customerNote = prompt("Nh·∫≠p ghi ch√∫ (n·∫øu c√≥):", "");
    const query = new URLSearchParams({
      approvalStatus,
      ...(customerNote ? { customerNote } : {}),
    }).toString();

    const url = `http://localhost:8080/api/customer/maintenance/checklists/details/${detailId}/approval?${query}`;
    console.log("[Report1] PUT:", url);

    const response = await fetch(url, {
      method: "PUT",
      headers: {
        Authorization: `Bearer ${token}`,
        "Content-Type": "application/json",
      },
    });

    if (!response.ok) {
      const txt = await response.text();
      console.error("[Report1] Approval error:", txt);
      alert("‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i!");
      return;
    }

    alert(`‚úÖ ƒê√£ ${status === "approved" ? "ph√™ duy·ªát" : "t·ª´ ch·ªëi"} th√†nh c√¥ng!`);

    // üîÅ G·ªçi l·∫°i GET ƒë·ªÉ c·∫≠p nh·∫≠t UI ƒë√∫ng theo d·ªØ li·ªáu t·ª´ backend
    const getUrl = `http://localhost:8080/api/customer/maintenance/checklists?customerId=${encodeURIComponent(customerId)}`;
    const refresh = await fetch(getUrl, {
      headers: { Authorization: `Bearer ${token}` },
    });
    const newData = await refresh.json();

    setReports(Array.isArray(newData) ? newData : [newData]);
  } catch (error) {
    console.error("[Report1] L·ªói khi c·∫≠p nh·∫≠t:", error);
    alert("L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i!");
  }
};


  if (loading) return <p className="loading">üîÑ ƒêang t·∫£i d·ªØ li·ªáu...</p>;

  return (
    <div className="report-page">
      <Navbar />

      <main className="main-content">
        <h1>üßæ Bi√™n b·∫£n b·∫£o d∆∞·ª°ng & s·ª≠a ch·ªØa</h1>
        <p className="sub-text">
          Xem v√† ph√™ duy·ªát c√°c h·∫°ng m·ª•c s·ª≠a ch·ªØa do k·ªπ thu·∫≠t vi√™n ƒë·ªÅ xu·∫•t.
        </p>

        {reports.length === 0 ? (
          <p className="no-data">Kh√¥ng c√≥ d·ªØ li·ªáu bi√™n b·∫£n n√†o.</p>
        ) : (
          reports.map((report) => (
            <div key={report.id} className="report-card">
              <div className="report-header">
                <h3>{report.scheduleName || "Kh√¥ng c√≥ t√™n l·ªãch tr√¨nh"}</h3>
                <span className={`status ${report.status || "unknown"}`}>
                  {report.status || "Kh√¥ng x√°c ƒë·ªãnh"}
                </span>
              </div>

              <div className="report-info">
                <p><strong>ID:</strong> {report.id}</p>
                <p><strong>K·ªπ thu·∫≠t vi√™n:</strong> {report.technicianName || "Kh√¥ng r√µ"}</p>
                <p><strong>Xe:</strong> {report.vehicleModel} - {report.vehicleNumberPlate}</p>
                <p><strong>S·ªë km hi·ªán t·∫°i:</strong> {report.currentKm?.toLocaleString() || "N/A"} km</p>
                <p><strong>M·ªëc b·∫£o d∆∞·ª°ng:</strong> {report.maintenanceKm?.toLocaleString() || "N/A"} km</p>
                <p><strong>Ng√†y t·∫°o:</strong> {report.createdDate || "N/A"}</p>
                <p><strong>T·ªïng chi ph√≠ d·ª± ki·∫øn:</strong> {(report.estimatedCost || 0).toLocaleString()}ƒë</p>
                <p><strong>Chi ph√≠ ƒë√£ duy·ªát:</strong> {(report.totalCostApproved || 0).toLocaleString()}ƒë</p>
                <p><strong>Chi ph√≠ b·ªã t·ª´ ch·ªëi:</strong> {(report.totalCostDeclined || 0).toLocaleString()}ƒë</p>
              </div>

              <h4>üß© Chi ti·∫øt h·∫°ng m·ª•c</h4>
              {(report.details && report.details.length > 0) ? (
                report.details.map((d) => (
                  <div key={d.id} className="detail-item">
                    <div className="detail-info">
                      <p><strong>T√™n h·∫°ng m·ª•c:</strong> {d.itemName || "Kh√¥ng c√≥ t√™n"}</p>
                      <p><strong>Linh ki·ªán:</strong> {d.partName || "Kh√¥ng r√µ"}</p>
                      <p><strong>S·ªë l∆∞·ª£ng:</strong> {d.partQuantityUsed || 0}</p>
                      <p><strong>Tr·∫°ng th√°i:</strong> {d.status || "Kh√¥ng x√°c ƒë·ªãnh"}</p>
                      <p><strong>Ghi ch√∫ k·ªπ thu·∫≠t vi√™n:</strong> {d.note || "Kh√¥ng c√≥ ghi ch√∫"}</p>
                      <p><strong>Ghi ch√∫ kh√°ch h√†ng:</strong> {d.customerNote || "Kh√¥ng c√≥"}</p>
                      <p><strong>Chi ph√≠ nh√¢n c√¥ng:</strong> {(d.laborCost || 0).toLocaleString()}ƒë</p>
                      <p><strong>Chi ph√≠ v·∫≠t li·ªáu:</strong> {(d.materialCost || 0).toLocaleString()}ƒë</p>
                      <p><strong>Tr·∫°ng th√°i ph√™ duy·ªát:</strong> {d.approvalStatus || "Ch∆∞a x·ª≠ l√Ω"}</p>
                    </div>

                    <div className="action-btns">
                      <button
                       className={`approve ${d.approvalStatus === "APPROVED" ? "active" : ""}`}
                         onClick={() => handleApproval(d.id, "approved")}
                                      >
                              ‚úÖ ƒê·ªìng √Ω
                            </button>
                            <button
                                   className={`reject ${d.approvalStatus === "DECLINED" ? "active" : ""}`}
                                onClick={() => handleApproval(d.id, "rejected")}
                               >
                             ‚ùå T·ª´ ch·ªëi
                                </button>

                    </div>
                  </div>
                ))
              ) : (
                <p className="no-detail">Kh√¥ng c√≥ h·∫°ng m·ª•c n√†o.</p>
              )}
            </div>
          ))
        )}
      </main>

      <Footer />
    </div>
  );
};

export default Report1;
