import React, { useEffect, useState } from "react";
import Sidebar from "../sidebar/sidebar"; // ƒê·∫£m b·∫£o ƒë∆∞·ªùng d·∫´n ƒë√∫ng
// *** TH√äM C√ÅC ICON C·∫¶N THI·∫æT ***
import { FaSpinner, FaExclamationTriangle, FaArrowLeft } from "react-icons/fa";
import { Send, CheckCircle } from "lucide-react"; // Gi·ªØ l·∫°i icon c≈© n·∫øu mu·ªën
import "./CheckList.css"; // S·ª≠ d·ª•ng CSS c·ªßa CheckList
// *** TH√äM useParams v√† useLocation ***
import { useNavigate, useParams, useLocation } from "react-router-dom";

export default function CheckList() {
  // *** L·∫§Y bookingId T·ª™ URL ***
  const { bookingId } = useParams(); // L·∫•y bookingId t·ª´ route param ":bookingId" (c√≥ th·ªÉ undefined n·∫øu v√†o /checklist)
  const navigate = useNavigate();
  const location = useLocation(); // L·∫•y th√¥ng tin ƒë∆∞·ªùng d·∫´n hi·ªán t·∫°i

  const [checklist, setChecklist] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const [updating, setUpdating] = useState(false); // State cho vi·ªác c·∫≠p nh·∫≠t (Technician)
  const [showDetails, setShowDetails] = useState(true); // M·∫∑c ƒë·ªãnh hi·ªÉn th·ªã chi ti·∫øt

  // *** X√ÅC ƒê·ªäNH VAI TR√í D·ª∞A TR√äN URL ***
  const isStaffViewing = location.pathname.startsWith('/staff/checklist/');
  const role = isStaffViewing ? 'STAFF' : 'TECHNICIAN'; // Vai tr√≤ hi·ªán t·∫°i

  // API base URL
  const API_BASE = import.meta.env.VITE_API_URL || "https://103.90.226.216:8443";
  const token = localStorage.getItem("token");

  // Options cho tr·∫°ng th√°i h·∫°ng m·ª•c (gi·ªëng nhau cho c·∫£ 2)
  const statusOptions = [
    { value: "T·ªêT", label: "T·ªët" },
    { value: "HI·ªÜU_CH·ªàNH", label: "Hi·ªáu ch·ªânh" },
    { value: "S·ª¨A_CH·ªÆA", label: "S·ª≠a ch·ªØa" },
    { value: "THAY_TH·∫æ", label: "Thay th·∫ø" },
  ];

  // --- H√ÄM FETCH CHECKLIST ƒê√É S·ª¨A ---
  const fetchChecklist = async () => {
    setLoading(true);
    setError("");
    setChecklist(null); // Reset checklist c≈©

    // X√°c ƒë·ªãnh API endpoint v√† logic d·ª±a tr√™n vai tr√≤ v√† bookingId
    let apiUrl = "";
    let isFetchingById = false;

    if (isStaffViewing) {
      if (!bookingId || isNaN(parseInt(bookingId))) {
        setError("ID Booking kh√¥ng h·ª£p l·ªá tr√™n URL.");
        setLoading(false);
        return;
      }
      apiUrl = `${API_BASE}/api/staff/checklist/${bookingId}`;
      isFetchingById = true;
    } else { // L√† Technician
        if (bookingId && !isNaN(parseInt(bookingId))) {
            // N·∫øu Technician truy c·∫≠p v·ªõi bookingId c·ª• th·ªÉ (v√≠ d·ª• t·ª´ link n√†o ƒë√≥)
             // Gi·∫£ s·ª≠ c√≥ API /api/technician/checklist/{bookingId}
            apiUrl = `${API_BASE}/api/technician/checklist/${bookingId}`; // <<<< THAY ƒê·ªîI API N·∫æU C·∫¶N
             isFetchingById = true;
             console.warn("Technician is fetching by bookingId. Ensure API exists:", apiUrl);
        } else {
            // Technician truy c·∫≠p /checklist (l·∫•y checklist ƒëang l√†m)
            apiUrl = `${API_BASE}/api/technician/my-checklists`;
             isFetchingById = false; // L·∫•y danh s√°ch
        }
    }

    try {
      if (!token) throw new Error("Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");

      console.log(`üîÑ (${role}) Fetching checklist from:`, apiUrl);

      const res = await fetch(apiUrl, {
        headers: { Authorization: `Bearer ${token}` },
      });

      if (!res.ok) {
        const errorText = await res.text();
        console.error(`(${role}) Checklist fetch failed:`, res.status, errorText);
        if (res.status === 401) { setError("Phi√™n ƒëƒÉng nh·∫≠p h·∫øt h·∫°n."); setTimeout(() => navigate("/"), 1500); }
        else if (res.status === 404) { setError(`Kh√¥ng t√¨m th·∫•y checklist ${isFetchingById ? `cho booking #${bookingId}` : 'n√†o ƒëang th·ª±c hi·ªán'}.`); }
        else if (res.status === 403) { setError("B·∫°n kh√¥ng c√≥ quy·ªÅn xem checklist n√†y."); }
        else { setError(`L·ªói ${res.status}: ${errorText}`); }
        return; // D·ª´ng l·∫°i
      }

      const data = await res.json();
      console.log(`‚úÖ (${role}) Checklist data received:`, JSON.stringify(data, null, 2));

      // X·ª≠ l√Ω d·ªØ li·ªáu tr·∫£ v·ªÅ
      let checklistData = null;
      if (isFetchingById && data && typeof data === 'object' && !Array.isArray(data)) {
         // N·∫øu fetch theo ID (Staff ho·∫∑c Tech), mong ƒë·ª£i 1 object
         checklistData = data;
      } else if (!isFetchingById && Array.isArray(data)) {
         // N·∫øu Technician fetch list (/my-checklists)
         if (data.length === 0) {
             setError("B·∫°n kh√¥ng c√≥ checklist n√†o ƒëang th·ª±c hi·ªán.");
         } else {
             // ∆Øu ti√™n checklist 'In Progress', n·∫øu kh√¥ng c√≥ th√¨ l·∫•y c√°i m·ªõi nh·∫•t (ho·∫∑c ƒë·∫ßu ti√™n)
             checklistData = data.find(c => c.status?.toLowerCase() === 'in progress') || data[0];
             console.log(`Technician: Found ${data.length} checklists, selected ID: ${checklistData?.id}`);
         }
      } else {
         // Tr∆∞·ªùng h·ª£p d·ªØ li·ªáu tr·∫£ v·ªÅ kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng mong ƒë·ª£i
         console.warn("API response format unexpected:", data);
         setError("D·ªØ li·ªáu checklist nh·∫≠n ƒë∆∞·ª£c kh√¥ng h·ª£p l·ªá.");
      }

      if (checklistData) {
         setChecklist(checklistData);
      }
      // Kh√¥ng c·∫ßn else v√¨ l·ªói ƒë√£ ƒë∆∞·ª£c set ·ªü tr√™n n·∫øu data kh√¥ng h·ª£p l·ªá

    } catch (err) {
      console.error(`‚ùå (${role}) L·ªói khi t·∫£i checklist:`, err);
      setError(err.message || "L·ªói k·∫øt n·ªëi ho·∫∑c x·ª≠ l√Ω d·ªØ li·ªáu checklist.");
    } finally {
      setLoading(false);
    }
  };

  // G·ªçi fetchChecklist khi component mount ho·∫∑c bookingId/role thay ƒë·ªïi
  useEffect(() => {
    fetchChecklist();
  }, [bookingId, isStaffViewing, navigate]); // Th√™m isStaffViewing

  // --- C√ÅC H√ÄM X·ª¨ L√ù (V√¥ hi·ªáu h√≥a cho Staff) ---
  const handleUpdate = async (detailId, field, value) => {
     if (isStaffViewing) {
        // Kh√¥ng l√†m g√¨ c·∫£ ho·∫∑c ch·ªâ log
        console.log("Staff view: Update prevented.");
        return;
     }
     // Logic c·∫≠p nh·∫≠t c·ªßa Technician
      setChecklist((prev) => ({
          ...prev,
          details: prev.details.map((item) =>
              item.id === detailId ? { ...item, [field]: value } : item
          ),
      }));

      setUpdating(true); // B√°o hi·ªáu ƒëang l∆∞u
      try {
        const item = checklist.details.find((d) => d.id === detailId);
        // L·∫•y gi√° tr·ªã m·ªõi nh·∫•t t·ª´ state (ph√≤ng tr∆∞·ªùng h·ª£p update nhi·ªÅu field li√™n ti·∫øp)
        const currentDetailState = checklist.details.find((d) => d.id === detailId);
        const status = field === "status" ? value : currentDetailState?.status || "";
        const note = field === "note" ? value : currentDetailState?.note || "";
        const partId = field === "partId" ? value : currentDetailState?.partId || null;

        const queryParams = new URLSearchParams({ status, note });
         // Ch·ªâ th√™m partId n·∫øu n√≥ c√≥ gi√° tr·ªã (kh√¥ng ph·∫£i null, undefined, 0, '')
        if (partId) queryParams.set('partId', partId);

        const url = `${API_BASE}/api/technician/detail/${detailId}?${queryParams.toString()}`;
        console.log("‚¨ÜÔ∏è Updating detail:", url);

        const res = await fetch(url, { method: "PUT", headers: { Authorization: `Bearer ${token}` } });
        if (!res.ok) {
            const errorText = await res.text();
            throw new Error(errorText || `C·∫≠p nh·∫≠t th·∫•t b·∫°i (${res.status})`);
        }
        // Fetch l·∫°i to√†n b·ªô checklist ƒë·ªÉ ƒë·∫£m b·∫£o d·ªØ li·ªáu (ƒë·∫∑c bi·ªát l√† gi√°) ƒë∆∞·ª£c c·∫≠p nh·∫≠t
        await fetchChecklist();
      } catch (err) {
        console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t chi ti·∫øt:", err);
        setError(`L·ªói c·∫≠p nh·∫≠t h·∫°ng m·ª•c #${detailId}: ${err.message}`);
        // C√¢n nh·∫Øc fetch l·∫°i checklist ƒë·ªÉ rollback UI n·∫øu API l·ªói
        // await fetchChecklist();
      } finally {
        setUpdating(false); // K·∫øt th√∫c tr·∫°ng th√°i l∆∞u
      }
  };

  const handleSendToCustomer = () => {
     if (isStaffViewing) return; // Staff kh√¥ng c√≥ quy·ªÅn
    alert("üì® G·ª≠i checklist cho Customer!");
    // Logic g·ªçi API g·ª≠i (n·∫øu c√≥)
  };

  const handleCompleteChecklist = async () => {
    if (isStaffViewing || !checklist || !checklist.id) return; // Staff kh√¥ng c√≥ quy·ªÅn ho·∫∑c thi·∫øu ID

     // Th√™m x√°c nh·∫≠n tr∆∞·ªõc khi ho√†n th√†nh
     if (!window.confirm("B·∫°n ch·∫Øc ch·∫Øn mu·ªën ho√†n th√†nh checklist n√†y? H√†nh ƒë·ªông n√†y s·∫Ω c·∫≠p nh·∫≠t kho ph·ª• t√πng v√† kh√¥ng th·ªÉ ho√†n t√°c tr·ª±c ti·∫øp.")) {
       return;
     }

     setUpdating(true); // D√πng updating ƒë·ªÉ b√°o hi·ªáu ƒëang x·ª≠ l√Ω
     setError(null);
     try {
       const url = `${API_BASE}/api/technician/${checklist.id}/complete`;
       console.log("üèÅ Completing checklist:", url);
       const res = await fetch(url, { method: "POST", headers: { Authorization: `Bearer ${token}` } });
       if (!res.ok) {
           const errorText = await res.text();
           throw new Error(errorText || `Kh√¥ng th·ªÉ ho√†n th√†nh (${res.status})`);
       }
       alert("‚úÖ Checklist ƒë√£ ƒë∆∞·ª£c ƒë√°nh d·∫•u l√† ho√†n th√†nh!");
       await fetchChecklist(); // C·∫≠p nh·∫≠t tr·∫°ng th√°i tr√™n UI
       // C√¢n nh·∫Øc chuy·ªÉn h∆∞·ªõng Technician v·ªÅ trang task list sau khi ho√†n th√†nh
       // navigate("/technician-task");
     } catch (err) {
       console.error("‚ùå L·ªói khi ho√†n th√†nh checklist:", err);
       setError(`L·ªói ho√†n th√†nh: ${err.message}`);
     } finally {
        setUpdating(false);
     }
  };

  // --- RENDER ---
  if (loading) {
     return (
        <div className="page-container">
          <Sidebar sidebarOpen={true} />
          <main className="content loading-state">
             <FaSpinner className="spinner" />
             <p>ƒêang t·∫£i chi ti·∫øt checklist...</p>
          </main>
        </div>
     );
   }

  // Hi·ªÉn th·ªã l·ªói ho·∫∑c kh√¥ng c√≥ d·ªØ li·ªáu
  if (error || !checklist) {
     return (
        <div className="page-container">
          <Sidebar sidebarOpen={true} />
           <main className="content error-state">
                <FaExclamationTriangle size={30} style={{ marginBottom: '15px', color: '#dc2626' }} />
                <p style={{ fontWeight: 'bold', color: '#b91c1c' }}>{error || "Kh√¥ng c√≥ d·ªØ li·ªáu checklist ƒë·ªÉ hi·ªÉn th·ªã."}</p>
                <button onClick={() => navigate(-1)} className="back-button" style={{ marginTop: '20px' }}>
                    <FaArrowLeft style={{ marginRight: '5px' }} /> Quay l·∫°i
                </button>
           </main>
        </div>
     );
  }

  // T√≠nh to√°n t·ªïng chi ph√≠ (an to√†n h∆°n v·ªõi optional chaining v√† ki·ªÉm tra m·∫£ng)
  const detailsAvailable = checklist.details && Array.isArray(checklist.details);
  const totalLaborCost = detailsAvailable ? checklist.details.reduce((sum, d) => sum + (Number(d.laborCost) || 0), 0) : 0;
  const totalMaterialCost = detailsAvailable ? checklist.details.reduce((sum, d) => sum + (Number(d.materialCost) || 0), 0) : 0;
  const isChecklistCompleted = checklist.status?.toLowerCase() === 'completed'; // Ki·ªÉm tra checklist ƒë√£ ho√†n th√†nh ch∆∞a

  return (
    <div className="page-container">
      {/* Sidebar c√≥ th·ªÉ c·∫ßn nh·∫≠n prop `role` ƒë·ªÉ hi·ªÉn th·ªã ƒë√∫ng menu */}
      <Sidebar sidebarOpen={true} />
      <main className="content">
        {/* Header */}
        <div className="header-bar">
          <div>
            <h2>{isStaffViewing ? `üîç Chi ti·∫øt Checklist - Booking #${checklist.bookingId || bookingId}` : `üß∞ B·∫£ng ki·ªÉm tra b·∫£o d∆∞·ª°ng`}</h2>
          </div>
          {/* Ch·ªâ hi·ªÉn th·ªã n√∫t cho Technician V√Ä checklist ch∆∞a ho√†n th√†nh */}
          {!isStaffViewing && !isChecklistCompleted && (
              <div className="btn-group">
                {/* <button className="btn-primary" onClick={handleSendToCustomer} disabled={updating}>
                  <Send size={16} /> G·ª≠i Customer
                </button> */}
                <button className="btn-success" onClick={handleCompleteChecklist} disabled={updating}>
                  <CheckCircle size={16} /> Ho√†n th√†nh
                </button>
              </div>
          )}
           {/* N√∫t quay l·∫°i cho Staff */}
           {isStaffViewing && (
                 <button onClick={() => navigate(-1)} className="back-button-header">
                     <FaArrowLeft style={{ marginRight: '5px' }} /> Quay l·∫°i DS
                 </button>
           )}
           {/* Th√¥ng b√°o ƒë√£ ho√†n th√†nh cho Technician */}
            {!isStaffViewing && isChecklistCompleted && (
                <div className="completion-notice">
                    <CheckCircle size={16} color="#16a34a" /> ƒê√£ ho√†n th√†nh
                </div>
            )}
        </div>

        {/* T·ªïng quan */}
        <div className="overview-section">
          <h3>üìã T·ªïng quan b·∫£o d∆∞·ª°ng</h3>
          <div className="overview-grid">
            {/* S·ª≠ d·ª•ng optional chaining ?. ƒë·ªÉ tr√°nh l·ªói n·∫øu checklist kh√¥ng c√≥ c√°c thu·ªôc t√≠nh n√†y */}
            <p><strong>T√™n l·ªãch tr√¨nh:</strong> {checklist.planName || checklist.scheduleName || 'N/A'}</p>
            <p><strong>Ng√†y t·∫°o:</strong> {checklist.createdDate ? new Date(checklist.createdDate).toLocaleDateString("vi-VN") : 'N/A'}</p>
            <p><strong>Tr·∫°ng th√°i Checklist:</strong> {checklist.status || 'N/A'}</p>
            <p><strong>K·ªπ thu·∫≠t vi√™n:</strong> {checklist.technicianName || 'N/A'}</p>
            <p><strong>Xe:</strong> {checklist.vehicleModel || 'N/A'} ({checklist.vehicleNumberPlate || 'N/A'})</p>
            <p><strong>Km hi·ªán t·∫°i (th·ª±c t·∫ø):</strong> {checklist.currentKm?.toLocaleString() || checklist.actualKm?.toLocaleString() || 'N/A'} km</p>
            <p><strong>Km b·∫£o d∆∞·ª°ng (d·ª± ki·∫øn):</strong> {checklist.maintenanceKm?.toLocaleString() || 'N/A'} km</p>
            {/* Hi·ªÉn th·ªã chi ph√≠ */}
            <p><strong>Chi ph√≠ ∆∞·ªõc t√≠nh:</strong> {(checklist.estimatedCost ?? 0).toLocaleString()}‚Ç´</p>
            <p><strong>Chi ph√≠ ƒë√£ duy·ªát (KH):</strong> {(checklist.totalCostApproved ?? 0).toLocaleString()}‚Ç´</p>
            <p><strong>Chi ph√≠ b·ªã t·ª´ ch·ªëi (KH):</strong> {(checklist.totalCostDeclined ?? 0).toLocaleString()}‚Ç´</p>
          </div>
        </div>

        {/* B·∫£ng chi ti·∫øt */}
        {detailsAvailable ? ( // Ch·ªâ render b·∫£ng n·∫øu c√≥ details
          <>
            <h3>üìä Chi ti·∫øt h·∫°ng m·ª•c</h3>
            <div className="table-wrapper" style={{ marginTop: '15px' }}> {/* B·ªçc table v√†o wrapper */}
                <table className="checklist-table">
                  <thead>
                    <tr>
                      <th>#</th>
                      <th>H·∫°ng m·ª•c</th>
                      <th>Tr·∫°ng th√°i KTV</th>
                      <th>Ph·ª• t√πng (n·∫øu thay)</th>
                      <th>Chi ph√≠ c√¥ng</th>
                      <th>Chi ph√≠ v·∫≠t t∆∞</th>
                      <th>Ghi ch√∫ KTV</th>
                      <th>Duy·ªát (KH)</th> {/* S·ª≠a l·∫°i label */}
                      <th>Ghi ch√∫ KH</th>
                    </tr>
                  </thead>
                  <tbody>
                    {checklist.details.map((item, idx) => (
                      <tr key={item.id}>
                        <td>{idx + 1}</td>
                        <td>{item.itemName || 'N/A'}</td>
                        {/* Tr·∫°ng th√°i KTV */}
                        <td>
                            {isStaffViewing || isChecklistCompleted ? ( // Staff ho·∫∑c checklist ƒë√£ ho√†n th√†nh => ch·ªâ xem
                                <span className={`status-text status-text-${item.status?.toLowerCase().replace(/[^a-z0-9]/g, '')}`}>
                                    {statusOptions.find(opt => opt.value === item.status)?.label || item.status || 'N/A'}
                                </span>
                            ) : ( // Technician v√† ch∆∞a ho√†n th√†nh => select
                                <select value={item.status || ""} onChange={(e) => handleUpdate(item.id, "status", e.target.value)} disabled={updating} >
                                    <option value="" disabled>-- Ch·ªçn --</option>
                                    {statusOptions.map((s) => (<option key={s.value} value={s.value}>{s.label}</option>))}
                                </select>
                            )}
                        </td>
                        {/* Ph·ª• t√πng */}
                        <td>
                          {isStaffViewing || isChecklistCompleted ? (
                               <span className="part-name">{item.partName || (item.status === "THAY TH·∫æ" ? 'Ch∆∞a ch·ªçn' : '‚Äî')}</span>
                          ) : (
                              item.status === "THAY TH·∫æ" ? (
                                  <select value={item.partId || ""} onChange={(e) => handleUpdate(item.id, "partId", e.target.value)} disabled={updating} >
                                    <option value="">-- Ch·ªçn ph·ª• t√πng --</option>
                                    {/* S·ª≠ d·ª•ng Set ƒë·ªÉ lo·∫°i b·ªè part tr√πng l·∫∑p n·∫øu API tr·∫£ v·ªÅ l·ªói */}
                                    { item.availableParts && [...new Map(item.availableParts.map(p => [p.partId, p])).values()]
                                        .filter(p => p.quantity > 0 || String(p.partId) === String(item.partId)) // Hi·ªán part ƒë√£ ch·ªçn k·ªÉ c·∫£ h·∫øt h√†ng
                                        .map((p) => (
                                            <option key={p.partId} value={p.partId}>
                                                {p.partName} ({String(p.partId) === String(item.partId) ? 'ƒê√£ ch·ªçn' : `${p.quantity} c√≥ s·∫µn`})
                                            </option>
                                        ))
                                    }
                                  </select>
                              ) : ( "‚Äî" )
                          )}
                        </td>
                        {/* Chi ph√≠ */}
                        <td>{item.laborCost ? `${Number(item.laborCost).toLocaleString()}‚Ç´` : "0‚Ç´"}</td>
                        <td>{item.materialCost ? `${Number(item.materialCost).toLocaleString()}‚Ç´` : "0‚Ç´"}</td>
                        {/* Ghi ch√∫ KTV */}
                        <td>
                             {isStaffViewing || isChecklistCompleted ? (
                                  <span className="note-text">{item.note || 'Kh√¥ng c√≥'}</span>
                             ) : (
                                <input type="text" value={item.note || ""} placeholder="Ghi ch√∫..." onChange={(e) => handleUpdate(item.id, "note", e.target.value)} disabled={updating} />
                             )}
                        </td>
                         {/* Tr·∫°ng th√°i duy·ªát KH */}
                         <td>
                            <span className={`approval-status approval-${(item.approvalStatus || 'pending').toLowerCase()}`}>
                                { item.approvalStatus === 'APPROVED' ? 'ƒê√£ duy·ªát' :
                                  item.approvalStatus === 'DECLINED' ? 'T·ª´ ch·ªëi' : 'Ch·ªù duy·ªát' }
                            </span>
                         </td>
                         {/* Ghi ch√∫ KH */}
                         <td>
                            <span className="note-text">{item.customerNote || 'Kh√¥ng c√≥'}</span>
                         </td>
                      </tr>
                    ))}
                    {/* D√≤ng t·ªïng c·ªông */}
                    <tr className="total-row">
                      <td colSpan="4" style={{ textAlign: "right" }}><strong>T·ªïng c·ªông ∆∞·ªõc t√≠nh:</strong></td>
                      <td><strong>{totalLaborCost.toLocaleString()}‚Ç´</strong></td>
                      <td><strong>{totalMaterialCost.toLocaleString()}‚Ç´</strong></td>
                      <td colSpan="3"></td> {/* ƒêi·ªÅu ch·ªânh colspan */}
                    </tr>
                  </tbody>
                </table>
            </div>
          </>
        ) : (
             <p className="no-detail-message">Kh√¥ng c√≥ chi ti·∫øt h·∫°ng m·ª•c n√†o trong checklist n√†y.</p>
         )}

        {/* Th√¥ng b√°o ƒëang l∆∞u (ch·ªâ cho Tech) */}
        {updating && !isStaffViewing && <p className="saving-indicator"><FaSpinner className="spinner-icon" /> ƒêang l∆∞u thay ƒë·ªïi...</p>}
      </main>
    </div>
  );
}