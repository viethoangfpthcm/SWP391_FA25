import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import Navbar from '../../components/Navbar';
import Footer from '../../components/Footer';
import './VehicleMaintenanceSchedule.css';

import { FaCalendarAlt, FaTools, FaCheckCircle, FaExclamationTriangle, FaCalendarPlus, FaTimes, FaLock, FaSpinner } from 'react-icons/fa';

function VehicleMaintenanceSchedule() {
  const { licensePlate } = useParams();
  const [schedule, setSchedule] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const navigate = useNavigate();

  const [nextTimePlanId, setNextTimePlanId] = useState(null);

  const [hasActiveBooking, setHasActiveBooking] = useState(false);
  const [activeBookings, setActiveBookings] = useState([]);

  // State cho Booking Pop-up
  const [showBookingForm, setShowBookingForm] = useState(false);
  const [selectedPlanForBooking, setSelectedPlanForBooking] = useState(null);
  const [bookingFormData, setBookingFormData] = useState({
    centerId: '',
    bookingDate: '',
    bookingTime: '',
    note: ''
  });
  const [bookingLoading, setBookingLoading] = useState(false);
  const [bookingError, setBookingError] = useState('');

  // State cho Modal Success (Gi·ªØ nguy√™n)
  const [showSuccessModal, setShowSuccessModal] = useState(false);
  const [successModalMessage, setSuccessModalMessage] = useState('');
  const [successModalAction, setSuccessModalAction] = useState(null);

  // *** TH√äM M·ªöI: State cho Modal Confirm (H·ªèi l·∫°i) ***
  const [showConfirmModal, setShowConfirmModal] = useState(false);
  const [confirmModalMessage, setConfirmModalMessage] = useState('');
  const [onConfirmAction, setOnConfirmAction] = useState(null); // H√†m s·∫Ω ch·∫°y khi b·∫•m "X√°c nh·∫≠n"


  // Danh s√°ch trung t√¢m
  const [serviceCenters] = useState([
    { id: 1, name: "EV Center 1", address: "25 Nguy·ªÖn Hu·ªá, Qu·∫≠n 1, TP.HCM", phone: "0787052810" },
    { id: 2, name: "EV Center 2", address: "12 V√µ VƒÉn Ng√¢n, Th·ªß ƒê·ª©c, TP.HCM", phone: "0787052811" },
    { id: 3, name: "EV Center 3", address: "200 Nguy·ªÖn VƒÉn C·ª´, Qu·∫≠n 5, TP.HCM", phone: "0787052812" },
  ]);

  const API_BASE = import.meta.env.VITE_API_URL || "https://103.90.226.216:8443";

  // useEffect (Kh√¥ng ƒë·ªïi)
  useEffect(() => {
    const fetchScheduleAndBookings = async () => {
      const token = localStorage.getItem("token");
      if (!token) {
        setError("Vui l√≤ng ƒëƒÉng nh·∫≠p.");
        setLoading(false);
        navigate("/");
        return;
      }
      try {
        setLoading(true);
        setSchedule([]);
        setHasActiveBooking(false);
        setActiveBookings([]);

        // --- 1. Fetch L·ªãch B·∫£o D∆∞·ª°ng ---
        const scheduleResponse = await fetch(`${API_BASE}/api/customer/maintenance-schedule?licensePlate=${encodeURIComponent(licensePlate)}`, {
          headers: { "Authorization": `Bearer ${token}`, "Accept": "application/json" },
        });
        if (!scheduleResponse.ok) {
          if (scheduleResponse.status === 401 || scheduleResponse.status === 403) {
            setError("Phi√™n ƒëƒÉng nh·∫≠p h·∫øt h·∫°n ho·∫∑c kh√¥ng c√≥ quy·ªÅn. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
            localStorage.removeItem("token");
            localStorage.removeItem("userId");
            localStorage.removeItem("role");
            navigate("/");
            return;
          } else if (scheduleResponse.status === 404) {
            setError(`Kh√¥ng t√¨m th·∫•y l·ªãch b·∫£o d∆∞·ª°ng cho xe ${licensePlate}.`);
          } else {
            throw new Error(`L·ªói ${scheduleResponse.status}: Kh√¥ng th·ªÉ t·∫£i l·ªãch b·∫£o d∆∞·ª°ng.`);
          }
        } else {
          const scheduleData = await scheduleResponse.json();
          const validSchedule = Array.isArray(scheduleData) ? scheduleData : [];
          setSchedule(validSchedule);
          setError('');
          const bookableItem = validSchedule.find(item => item.status === 'OVERDUE') ||
            validSchedule.find(item => item.status === 'NEXT_TIME');

          setNextTimePlanId(bookableItem ? bookableItem.maintenancePlanId : null);
        }

        // --- 2. Fetch Th√¥ng tin Booking hi·ªán t·∫°i c·ªßa xe ---
        const bookingsResponse = await fetch(`${API_BASE}/api/customer/bookings/vehicle/${encodeURIComponent(licensePlate)}`, {
          headers: { "Authorization": `Bearer ${token}`, "Accept": "application/json" },
        });
        if (bookingsResponse.ok) {
          const responseData = await bookingsResponse.json();
          console.log("üìã Response VehicleBookingDTO:", responseData);
          if (responseData && typeof responseData === 'object' && 'hasActiveBooking' in responseData && 'currentBookings' in responseData) {
            const hasActive = responseData.hasActiveBooking;
            const activeList = Array.isArray(responseData.currentBookings) ? responseData.currentBookings : [];
            setHasActiveBooking(hasActive);
            setActiveBookings(activeList);
            console.log("Active Bookings List (t·ª´ DTO):", activeList);
            console.log("Has Active Booking Flag (t·ª´ DTO):", hasActive);
          } else {
            console.warn("C·∫•u tr√∫c response Booking KH√îNG ph·∫£i VehicleBookingDTO:", responseData);
            setHasActiveBooking(false);
            setActiveBookings([]);
          }
        } else {
          console.warn("Kh√¥ng th·ªÉ t·∫£i danh s√°ch booking:", bookingsResponse.status);
          setHasActiveBooking(false);
          setActiveBookings([]);
        }
      } catch (err) {
        console.error("L·ªói khi fetch data:", err);
        setError(err.message || "ƒê√£ x·∫£y ra l·ªói khi t·∫£i d·ªØ li·ªáu.");
        setSchedule([]);
        setHasActiveBooking(false);
        setActiveBookings([]);
      } finally {
        setLoading(false);
      }
    };
    fetchScheduleAndBookings();
  }, [licensePlate, navigate, API_BASE]);

  // getStatusIcon (Kh√¥ng ƒë·ªïi)
  const getStatusIcon = (status) => {
    switch (status) {
      case 'ON_TIME':
        return <FaCheckCircle className="status-icon on-time" title="ƒê√£ ho√†n th√†nh" />;
      case 'EXPIRED':
        return <FaExclamationTriangle className="status-icon expired" title="ƒê√£ b·ªè qua" />;
      case 'NEXT_TIME':
        return <FaCalendarAlt className="status-icon next-time" title="L∆∞·ª£t b·∫£o d∆∞·ª°ng ti·∫øp theo" />;
      case 'LOCKED':
        return <FaLock className="status-icon locked" title="C·∫ßn ho√†n th√†nh l·∫ßn tr∆∞·ªõc" />;
      case 'OVERDUE':
        return <FaExclamationTriangle className="status-icon overdue" title="Qu√° h·∫°n b·∫£o d∆∞·ª°ng" />;
      default:
        return <FaTools className="status-icon unknown" title="Ch∆∞a x√°c ƒë·ªãnh" />;
    }
  };

  // getStatusLabel (Kh√¥ng ƒë·ªïi)
  const getStatusLabel = (status) => {
    switch (status) {
      case 'ON_TIME': return 'ƒê√£ ho√†n th√†nh';
      case 'EXPIRED': return 'ƒê√£ b·ªè qua';
      case 'NEXT_TIME': return 'C√≥ th·ªÉ ƒë·∫∑t l·ªãch';
      case 'LOCKED': return 'Ch∆∞a th·ªÉ ƒë·∫∑t l·ªãch';
      case 'OVERDUE': return 'ƒê√£ qu√° h·∫°n';
      default: return 'Kh√¥ng x√°c ƒë·ªãnh';
    }
  };

  // handleBookAppointmentClick (Kh√¥ng ƒë·ªïi)
  const handleBookAppointmentClick = (plan) => {
    setError('');
    if (hasActiveBooking) {
      setError("Kh√¥ng th·ªÉ ƒë·∫∑t l·ªãch. Xe n√†y ƒëang c√≥ l·ªãch h·∫πn ch·ªù x·ª≠ l√Ω ho·∫∑c ƒëang b·∫£o d∆∞·ª°ng.");
      return;
    }
    setSelectedPlanForBooking(plan);
    setBookingError('');
    setBookingFormData({ centerId: '', bookingDate: '', bookingTime: '', note: '' });
    setShowBookingForm(true);
  };

  // handleBookingFormChange (Kh√¥ng ƒë·ªïi)
  const handleBookingFormChange = (e) => {
    const { name, value } = e.target;
    setBookingFormData(prev => ({ ...prev, [name]: value }));
  };

  // handleConfirmBooking (Kh√¥ng ƒë·ªïi, ƒë√£ s·ª≠a ·ªü l·∫ßn tr∆∞·ªõc)
  const handleConfirmBooking = async (e) => {
    e.preventDefault();
    setBookingLoading(true);
    setBookingError('');
    const token = localStorage.getItem("token");

    if (!bookingFormData.centerId || !bookingFormData.bookingDate || !bookingFormData.bookingTime) {
      setBookingError("Vui l√≤ng ch·ªçn trung t√¢m, ng√†y v√† gi·ªù h·∫πn.");
      setBookingLoading(false);
      return;
    }

    try {
      const bookingDateTime = `${bookingFormData.bookingDate}T${bookingFormData.bookingTime}:00`;
      const payload = {
        vehiclePlate: licensePlate,
        centerId: parseInt(bookingFormData.centerId),
        bookingDate: bookingDateTime,
        maintenancePlanId: selectedPlanForBooking.maintenancePlanId,
        note: bookingFormData.note
      };
      const response = await fetch(`${API_BASE}/api/customer/bookings`, {
        method: "POST",
        headers: {
          "Authorization": `Bearer ${token}`,
          "Content-Type": "application/json",
          "Accept": "application/json",
        },
        body: JSON.stringify(payload),
      });

      if (!response.ok) {
        if (response.status === 401 || response.status === 403) {
          throw new Error("Kh√¥ng th·ªÉ ƒë·∫∑t l·ªãch (L·ªói x√°c th·ª±c)");
        }
        const errorText = await response.text();
        try {
          const errorJson = JSON.parse(errorText);
          throw new Error(errorJson.message || errorJson.error || `L·ªói ${response.status}: ${errorText}`);
        } catch (parseError) {
          throw new Error(`L·ªói ${response.status}: ${errorText}`);
        }
      }

      setShowBookingForm(false);
      // M·ªü modal success
      setSuccessModalMessage("ƒê·∫∑t l·ªãch th√†nh c√¥ng! Ch√∫ng t√¥i s·∫Ω s·ªõm li√™n h·ªá v·ªõi b·∫°n ƒë·ªÉ x√°c nh·∫≠n.");
      setSuccessModalAction(() => () => navigate('/customer/dashboard'));
      setShowSuccessModal(true);

    } catch (err) {
      console.error("L·ªói khi ƒë·∫∑t l·ªãch:", err);
      setBookingError(err.message || "ƒê√£ x·∫£y ra l·ªói khi ƒë·∫∑t l·ªãch.");
    } finally {
      setBookingLoading(false);
    }
  };


  // *** S·ª¨A L·∫†I: T√ÅCH H√ÄM H·ª¶Y L√ÄM 2 B∆Ø·ªöC ***

  // B∆∞·ªõc 1: H√†m n√†y ƒë∆∞·ª£c g·ªçi b·ªüi n√∫t "H·ªßy l·ªãch h·∫πn"
  const handleCancelBookingClick = (bookingId) => {
    setConfirmModalMessage("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën h·ªßy l·ªãch h·∫πn n√†y? H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c.");
    // G√°n h√†m "executeCancelBooking" cho n√∫t X√°c nh·∫≠n
    // D√πng () => () => ... ƒë·ªÉ n√≥ kh√¥ng t·ª± ch·∫°y
    setOnConfirmAction(() => () => executeCancelBooking(bookingId));
    setShowConfirmModal(true); // M·ªü modal h·ªèi
  };

  // B∆∞·ªõc 2: H√†m n√†y ch·ª©a logic, ƒë∆∞·ª£c g·ªçi b·ªüi n√∫t "X√°c nh·∫≠n" tr√™n modal
  const executeCancelBooking = async (bookingId) => {
    setBookingLoading(true);
    setError('');
    const token = localStorage.getItem("token");

    try {
      const response = await fetch(`${API_BASE}/api/customer/bookings/${bookingId}/cancel`, {
        method: "PUT",
        headers: {
          "Authorization": `Bearer ${token}`,
          "Accept": "application/json",
        },
      });

      if (!response.ok) {
        const errorText = await response.text();
        try {
          const errorJson = JSON.parse(errorText);
          throw new Error(errorJson.message || `L·ªói ${response.status}`);
        } catch (parseError) {
          throw new Error(`L·ªói ${response.status}: ${errorText}`);
        }
      }

      // C·∫≠p nh·∫≠t l·∫°i UI
      const updatedActiveBookings = activeBookings.filter(b => b.bookingId !== bookingId);
      setActiveBookings(updatedActiveBookings);
      if (updatedActiveBookings.length === 0) {
        setHasActiveBooking(false);
      }

      // M·ªü modal success
      setSuccessModalMessage("ƒê√£ h·ªßy l·ªãch h·∫πn th√†nh c√¥ng.");
      setSuccessModalAction(null);
      setShowSuccessModal(true);

    } catch (err) {
      console.error("L·ªói khi h·ªßy l·ªãch:", err);
      setError(err.message || "ƒê√£ x·∫£y ra l·ªói khi h·ªßy l·ªãch h·∫πn.");
    } finally {
      setBookingLoading(false);
      // Quan tr·ªçng: ƒê√≥ng modal confirm l·∫°i
      setShowConfirmModal(false);
    }
  };
  // *** K·∫æT TH√öC S·ª¨A ***


  if (loading) {
    return (
      <div className="schedule-page loading-container">
        <Navbar />
        <div className="loading-container">
          <FaSpinner className="spinner-icon" />
          ƒêang t·∫£i l·ªãch b·∫£o d∆∞·ª°ng...
        </div>
        <Footer />
      </div>
    );
  }

  return (
    <div className="schedule-page">
      <Navbar />
      <main className="schedule-content">
        <h1>L·ªãch tr√¨nh b·∫£o d∆∞·ª°ng cho xe {licensePlate}</h1>

        {/* --- Ph·∫ßn hi·ªÉn th·ªã booking active --- */}
        {activeBookings.length > 0 && (
          <div className="active-bookings-section">
            <h2>L·ªãch h·∫πn ƒëang x·ª≠ l√Ω</h2>
            {activeBookings.map(booking => (
              <div key={booking.bookingId} className={`active-booking-item status-${booking.status?.toLowerCase()}`}>
                <p><strong>Trung t√¢m:</strong> {booking.centerName}</p>
                <p><strong>ƒê·ªãa ch·ªâ:</strong> {booking.centerAddress}</p>
                <p><strong>Ng√†y h·∫πn:</strong> {new Date(booking.bookingDate).toLocaleString('vi-VN')}</p>
                <p><strong>Tr·∫°ng th√°i:</strong> {booking.status}</p>
                {booking.status === 'Pending' && (
                  <button
                    // *** S·ª¨A L·∫†I: G·ªçi h√†m m·ªü modal ***
                    onClick={() => handleCancelBookingClick(booking.bookingId)}
                    className="btn-cancel"
                    disabled={bookingLoading}
                  >
                    <FaTimes /> H·ªßy l·ªãch h·∫πn
                  </button>
                )}
              </div>
            ))}
          </div>
        )}

        {error && <p className="error-message centered">{error}</p>}

        {/* --- Modal Form ƒê·∫∑t L·ªãch (Kh√¥ng thay ƒë·ªïi) --- */}
        {showBookingForm && selectedPlanForBooking && (
          <div className="modal-overlay">
            <div className="modal-content booking-form-modal">
              <div className="modal-header">
                <h2>ƒê·∫∑t l·ªãch cho: {selectedPlanForBooking.planName}</h2>
                <button onClick={() => setShowBookingForm(false)} className="close-modal-btn"> <FaTimes /> </button>
              </div>
              <form onSubmit={handleConfirmBooking}>
                {bookingError && <p className="error-message">{bookingError}</p>}
                <p className="booking-info">Xe: <strong>{licensePlate}</strong></p>
                <p className="booking-info">G√≥i: <strong>{selectedPlanForBooking.planName}</strong> ({selectedPlanForBooking.intervalKm?.toLocaleString()} km)</p>
                <div className="form-group">
                  <label htmlFor="centerId">Ch·ªçn trung t√¢m *</label>
                  <select id="centerId" name="centerId" value={bookingFormData.centerId} onChange={handleBookingFormChange} required>
                    <option value="" disabled>-- Ch·ªçn trung t√¢m d·ªãch v·ª• --</option>
                    {serviceCenters.map(center => (
                      <option key={center.id} value={center.id}> {center.name} - {center.address} </option>
                    ))}
                  </select>
                </div>
                <div className="form-group inline-group">
                  <div>
                    <label htmlFor="bookingDate">Ch·ªçn ng√†y *</label>
                    <input type="date" id="bookingDate" name="bookingDate" value={bookingFormData.bookingDate} onChange={handleBookingFormChange} required min={new Date().toISOString().split('T')[0]} />
                  </div>
                  <div>
                    <label htmlFor="bookingTime">Ch·ªçn gi·ªù *</label>
                    <input type="time" id="bookingTime" name="bookingTime" value={bookingFormData.bookingTime} onChange={handleBookingFormChange} required />
                  </div>
                </div>
                <div className="form-group">
                  <label htmlFor="note">Ghi ch√∫ (T√πy ch·ªçn)</label>
                  <input type="text" id="note" name="note" value={bookingFormData.note} onChange={handleBookingFormChange} placeholder="Y√™u c·∫ßu th√™m (n·∫øu c√≥)..." />
                </div>
                <div className="form-actions">
                  <button type="button" onClick={() => setShowBookingForm(false)} className="btn-cancel" disabled={bookingLoading}>H·ªßy</button>
                  <button type="submit" className="btn-save" disabled={bookingLoading}>
                    {bookingLoading ? 'ƒêang x·ª≠ l√Ω...' : 'X√°c nh·∫≠n ƒë·∫∑t l·ªãch'}
                  </button>
                </div>
              </form>
            </div>
          </div>
        )}

        {/* --- Modal Success (Kh√¥ng thay ƒë·ªïi) --- */}
        {showSuccessModal && (
          <div className="modal-overlay">
            <div className="modal-content success-modal">
              <div className="success-modal-body">
                <FaCheckCircle className="success-icon" />
                <p>{successModalMessage}</p>
              </div>
              <div className="form-actions">
                <button
                  onClick={() => {
                    setShowSuccessModal(false);
                    if (successModalAction) {
                      successModalAction();
                    }
                  }}
                  className="btn-save"
                >
                  OK
                </button>
              </div>
            </div>
          </div>
        )}

        {/* *** TH√äM M·ªöI: Modal Confirm (H·ªèi l·∫°i) *** */}
        {showConfirmModal && (
          <div className="modal-overlay">
            <div className="modal-content confirm-modal">
              <div className="confirm-modal-body">
                <FaExclamationTriangle className="confirm-icon" />
                <h3>X√°c nh·∫≠n h√†nh ƒë·ªông</h3>
                <p>{confirmModalMessage}</p>
              </div>
              <div className="form-actions">
                {/* N√∫t H·ªßy (d√πng class .btn-cancel c·ªßa form) */}
                <button
                  onClick={() => setShowConfirmModal(false)}
                  className="btn-cancel"
                  disabled={bookingLoading}
                >
                  H·ªßy b·ªè
                </button>
                {/* N√∫t X√°c nh·∫≠n (d√πng class m·ªõi .btn-confirm-danger) */}
                <button
                  onClick={() => {
                    if (onConfirmAction) {
                      onConfirmAction(); // Ch·∫°y h√†m 'executeCancelBooking'
                    }
                  }}
                  className="btn-confirm-danger"
                  disabled={bookingLoading}
                >
                  {bookingLoading ? 'ƒêang x·ª≠ l√Ω...' : 'X√°c nh·∫≠n'}
                </button>
              </div>
            </div>
          </div>
        )}
        {/* --- K·∫øt th√∫c Modal Confirm --- */}


        {/* --- Danh s√°ch l·ªãch b·∫£o d∆∞·ª°ng (Kh√¥ng thay ƒë·ªïi) --- */}
        {schedule.length > 0 ? (
          <div className="schedule-list">
            {schedule.map((item) => (
              <div key={item.maintenancePlanId} className={`schedule-item status-${item.status?.toLowerCase()}`}>
                <div className="schedule-item-header">
                  <h3>{item.planName}</h3>
                  <div className="status-container">
                    {getStatusIcon(item.status)}
                    <span className="status-label">{getStatusLabel(item.status)}</span>
                  </div>
                </div>
                <p className="description">{item.description || 'Kh√¥ng c√≥ m√¥ t·∫£ chi ti·∫øt.'}</p>
                <p><strong>M·ªëc KM:</strong> {item.intervalKm?.toLocaleString()} km</p>
                {item.planDate && (
                  <p><strong>Ng√†y d·ª± ki·∫øn:</strong> {new Date(item.planDate).toLocaleDateString('vi-VN')}</p>
                )}
                {item.deadline && (
                  <p><strong>H·∫°n ch√≥t:</strong> {new Date(item.deadline).toLocaleDateString('vi-VN')}</p>
                )}

                {item.status === 'EXPIRED' && (
                  <p className="expired-info">
                    <FaExclamationTriangle /> L·∫ßn b·∫£o d∆∞·ª°ng n√†y ƒë√£ b·ªã b·ªè qua
                  </p>
                )}
                {item.status === 'LOCKED' && (
                  <p className="locked-message">
                    <FaLock /> C·∫ßn ho√†n th√†nh l·∫ßn b·∫£o d∆∞·ª°ng k·∫ø ti·∫øp tr∆∞·ªõc
                  </p>
                )}
                {item.status === 'OVERDUE' && (
                  <p className="overdue-info">
                    <FaExclamationTriangle /> L·ªãch b·∫£o d∆∞·ª°ng n√†y ƒë√£ qu√° h·∫°n! Vui l√≤ng ƒë·∫∑t l·ªãch s·ªõm nh·∫•t c√≥ th·ªÉ.
                  </p>
                )}
                {(item.status === 'NEXT_TIME' || item.status === 'OVERDUE') && item.maintenancePlanId === nextTimePlanId && (
                  hasActiveBooking ? (
                    <p className="locked-message" style={{ color: '#ff6b6b', fontWeight: 'bold' }}>
                      <FaCalendarAlt style={{ marginRight: '8px' }} />
                      Xe n√†y ƒë√£ c√≥ l·ªãch h·∫πn (Ch·ªù x·ª≠ l√Ω ho·∫∑c ch∆∞a thanh to√°n).
                    </p>
                  ) : (
                    <button
                      className="book-now-button"
                      onClick={() => handleBookAppointmentClick(item)}
                    >
                      <FaCalendarPlus /> ƒê·∫∑t l·ªãch ngay
                    </button>
                  )
                )}
                {item.status === 'ON_TIME' && (
                  <div className="completed-badge">
                    <FaCheckCircle /> ƒê√£ ho√†n th√†nh
                  </div>
                )}
              </div>
            ))}
          </div>
        ) : (
          !error && !loading && <p className="no-data">Kh√¥ng c√≥ l·ªãch tr√¨nh b·∫£o d∆∞·ª°ng n√†o cho xe n√†y.</p>
        )}
        <button onClick={() => navigate(-1)} className="back-button">Quay l·∫°i Dashboard</button>
      </main>
      <Footer />
    </div>
  );
}

export default VehicleMaintenanceSchedule;