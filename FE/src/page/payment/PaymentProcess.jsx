import React, {useEffect, useState} from "react";
import {useParams, useNavigate} from "react-router-dom";
import "./Payment.css";

export default function PaymentProcess() {
  const { id } = useParams(); // bookingId t·ª´ URL
  const navigate = useNavigate();

  const [payment, setPayment] = useState(null);
  const [loading, setLoading] = useState(true);
  const [processing, setProcessing] = useState(false);
  const [error, setError] = useState("");

  // üß© T·∫£i th√¥ng tin chi ti·∫øt booking c·∫ßn thanh to√°n
  useEffect(() => {
    const fetchPaymentDetail = async () => {
      try {
        const token = localStorage.getItem("token");
        const userId = localStorage.getItem("userId");

        if (!token) {
          alert("B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n!");
          navigate("/login");
          return;
        }

        const res = await fetch(
          `http://localhost:8080/api/customer/bookings?userId=${userId}`,
          {
            method: "GET",
            headers: {
              "Authorization": `Bearer ${token}`,
              "Accept": "application/json",
            },
          }
        );

        if (res.status === 401) {
          alert("Phi√™n ƒëƒÉng nh·∫≠p h·∫øt h·∫°n, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i!");
          localStorage.removeItem("token");
          navigate("/login");
          return;
        }

        if (!res.ok) {
          setError(`Kh√¥ng th·ªÉ t·∫£i th√¥ng tin ƒë∆°n h√†ng (m√£ l·ªói: ${res.status})`);
          return;
        }

        const data = await res.json();
        const booking = data.find((b) => b.bookingId === Number(id));

        if (!booking) {
          setError("Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng.");
          return;
        }

        // üëá Gi·∫£ s·ª≠ amount ch∆∞a c√≥, t·∫°m g√°n gi√° tr·ªã m·∫´u
        setPayment({
          ...booking,
          amount: booking.amount || 500000,
        });
      } catch (err) {
        console.error(err);
        setError("L·ªói k·∫øt n·ªëi ƒë·∫øn server!");
      } finally {
        setLoading(false);
      }
    };

    fetchPaymentDetail();
  }, [id, navigate]);

  // üßæ X·ª≠ l√Ω thanh to√°n
  const handlePayment = async () => {
    setProcessing(true);
    try {
      const token = localStorage.getItem("token");

      if (!token) {
        alert("B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c token kh√¥ng t·ªìn t·∫°i!");
        navigate("/login");
        return;
      }

            const res = await fetch(`https://103.90.226.216:8443/api/payment/process?bookingId=${id}`, {
                method: "POST",
                headers: {
                    "Authorization": `Bearer ${token}`,
                    "Accept": "application/json",
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({
                    paymentId: 0,
                    paymentDate: new Date().toISOString(),
                    laborCost: 0,
                    materialCost: 0,
                    totalAmount: payment?.amount || 0,
                    status: "PENDING",
                    note: "Thanh to√°n qua React",
                }),
            });

            if (res.ok) {
                alert("Thanh to√°n th√†nh c√¥ng!");
                navigate("/payment/ready");
            } else if (res.status === 401) {
                alert("Phi√™n ƒëƒÉng nh·∫≠p h·∫øt h·∫°n, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i!");
                navigate("/login");
            } else if (res.status === 403) {
                alert("T√†i kho·∫£n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông n√†y!");
            } else {
                alert(`Thanh to√°n th·∫•t b·∫°i (m√£ l·ªói: ${res.status})`);
            }
        } catch (err) {
            console.error("L·ªói khi thanh to√°n:", err);
            alert("L·ªói k·∫øt n·ªëi server!");
        } finally {
            setProcessing(false);
        }
    };

  // üé® Giao di·ªán hi·ªÉn th·ªã
  if (loading) return <div className="loading">ƒêang t·∫£i d·ªØ li·ªáu...</div>;
  if (error) return <div className="error">{error}</div>;

  return (
    <div className="payment-container">
      <h1 className="payment-title">Qu√° tr√¨nh thanh to√°n</h1>

      <div className="payment-detail">
        <h3>{payment.vehicleModel || "Kh√¥ng r√µ xe"}</h3>
        <p>Bi·ªÉn s·ªë xe: {payment.vehiclePlate || "Kh√¥ng r√µ"}</p>
        <p>Trung t√¢m: {payment.centerName || "Kh√¥ng r√µ trung t√¢m"}</p>
        <p>ƒê·ªãa ch·ªâ: {payment.centerAddress || "Kh√¥ng r√µ ƒë·ªãa ch·ªâ"}</p>
        <p>S·ªë ti·ªÅn: {payment.amount?.toLocaleString()} VND</p>
        <p>Tr·∫°ng th√°i: {payment.status || "Ch·ªù thanh to√°n"}</p>
      </div>

      <button
        className="btn-pay"
        onClick={handlePayment}
        disabled={processing}
      >
        {processing ? "ƒêang x·ª≠ l√Ω..." : "X√°c nh·∫≠n thanh to√°n"}
      </button>
    </div>
  );
}
